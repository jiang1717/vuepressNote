(window.webpackJsonp=window.webpackJsonp||[]).push([[46],{439:function(t,_,v){"use strict";v.r(_);var r=v(25),a=Object(r.a)({},(function(){var t=this,_=t.$createElement,v=t._self._c||_;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"arraylist-与-linkedlist"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist"}},[t._v("#")]),t._v(" Arraylist 与 LinkedList")]),t._v(" "),v("h2",{attrs:{id:"_1-array"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-array"}},[t._v("#")]),t._v(" 1. Array")]),t._v(" "),v("p",[t._v("Array（数组）是基于索引（index）的数据结构，使用索引进行数据的搜索和读取速度很快，复杂度为O(1).")]),t._v(" "),v("p",[t._v("删除数据的开销很大，因为要重排数组中的所有数据。")]),t._v(" "),v("p",[t._v("数组初始化必须指定初始化的长度，否则会报错。")]),t._v(" "),v("h2",{attrs:{id:"_2-list"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-list"}},[t._v("#")]),t._v(" 2. List")]),t._v(" "),v("p",[t._v("List是一个有序的集合，可以包含重复的元素，提供了索引，"),v("RouterLink",{attrs:{to:"/be/java/集合01.html"}},[t._v("继承Collection")]),t._v("。")],1),t._v(" "),v("p",[t._v("List是一个接口，不可以实例化，有两个重要的实现类：ArrayList与LinkedList。")]),t._v(" "),v("h2",{attrs:{id:"_3-arraylist"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-arraylist"}},[t._v("#")]),t._v(" 3. ArrayList")]),t._v(" "),v("p",[t._v("ArrayList：可以看作是一个能够自动增长容量的数组，底层通过Array数组实现。")]),t._v(" "),v("p",[t._v("数组扩容实现：")]),t._v(" "),v("ol",[v("li",[t._v("新增数据空间判断：判断当前是否有空闲空间")]),t._v(" "),v("li",[t._v("扩容需要申请新的连续空间")]),t._v(" "),v("li",[t._v("把旧数组复制到新空间")]),t._v(" "),v("li",[t._v("添加新增数据")]),t._v(" "),v("li",[t._v("回收旧数组所在空间")])]),t._v(" "),v("p",[t._v("在初始化时指定长度性能会更好，这样不会重复的申请空间、复制数组、销毁空间。")]),t._v(" "),v("h2",{attrs:{id:"_4-linkedlist"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-linkedlist"}},[t._v("#")]),t._v(" 4. LinkedList")]),t._v(" "),v("p",[t._v("LinkedList底层通过双向链表实现，在添加和删除数据时性能更好，不需要连续空间。")]),t._v(" "),v("h2",{attrs:{id:"_5-arraylist-与-linkedlist对比"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-arraylist-与-linkedlist对比"}},[t._v("#")]),t._v(" 5. Arraylist 与 LinkedList对比")]),t._v(" "),v("ul",[v("li",[v("p",[t._v("时间复杂度")]),t._v(" "),v("table",[v("thead",[v("tr",[v("th",[t._v("操作")]),t._v(" "),v("th",[t._v("数组")]),t._v(" "),v("th",[t._v("链表")])])]),t._v(" "),v("tbody",[v("tr",[v("td",[t._v("随机访问")]),t._v(" "),v("td",[t._v("O(1)")]),t._v(" "),v("td",[t._v("O(n)")])]),t._v(" "),v("tr",[v("td",[t._v("头部插入")]),t._v(" "),v("td",[t._v("O(n)")]),t._v(" "),v("td",[t._v("O(1)")])]),t._v(" "),v("tr",[v("td",[t._v("头部删除")]),t._v(" "),v("td",[t._v("O(n)")]),t._v(" "),v("td",[t._v("O(1)")])]),t._v(" "),v("tr",[v("td",[t._v("尾部插入")]),t._v(" "),v("td",[t._v("O(1)")]),t._v(" "),v("td",[t._v("O(1)")])]),t._v(" "),v("tr",[v("td",[t._v("尾部删除")]),t._v(" "),v("td",[t._v("O(1)")]),t._v(" "),v("td",[t._v("O(1)")])])])])]),t._v(" "),v("li",[v("p",[t._v("查找的复杂度都为O(n)，但是数组比链表更快，因为数组的连续内存，会有一部分或者全部数据一起进入到CPU缓存，而链表还需要在去内存中根据上下游标查找，CPU缓存比内存块太多。")])]),t._v(" "),v("li",[v("p",[t._v("数组大小固定，不适合动态存储、添加；内存地址连续，可随机访问、查询速度快。")])]),t._v(" "),v("li",[v("p",[t._v("链表大小可变，可扩展性强；查询只能顺着指针方向，速度较慢。")])]),t._v(" "),v("li",[v("p",[t._v("线程安全：Arraylist 与 LinkedList 都是不同步的，也就是不保证线程安全。")])]),t._v(" "),v("li",[v("p",[t._v("底层数据结构：Arraylist 底层使用的是Object数组；LinkedList 底层使用的是双向链表。")])])]),t._v(" "),v("p",[t._v("参考："),v("a",{attrs:{href:"https://www.cnblogs.com/lingshang/p/10897912.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ArrayList和linkedList的区别"),v("OutboundLink")],1)])])}),[],!1,null,null,null);_.default=a.exports}}]);