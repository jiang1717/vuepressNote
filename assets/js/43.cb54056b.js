(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{435:function(t,e,a){"use strict";a.r(e);var r=a(25),n=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"java中的异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java中的异常处理"}},[t._v("#")]),t._v(" Java中的异常处理")]),t._v(" "),a("h2",{attrs:{id:"java异常类层次结构图"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#java异常类层次结构图"}},[t._v("#")]),t._v(" java异常类层次结构图")]),t._v(" "),a("div",{staticClass:"language-mermaid extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("graph LR\nA(Throwable) --\x3e B(Error)\n\tB --\x3e C(VirtulMachineError)\n\t\tC --\x3e D(StackOverFlowError)\n\t\tC --\x3e E(OutOfMemoryError)\n\tB --\x3e F(AWTError)\nA --\x3e G(Exception)\n\tG --\x3e H(IOException 输入输出异常)\n\t\tH --\x3e I(EOFException 文件已结束异常)\n\t\tH --\x3e J(FileNotFoundException 文件未找到异常)\n\tG --\x3e K(RuntimeException)\n\t\tK --\x3e L(ArithmeticException 算数异常)\n\t\tK --\x3e M(MissingResourceException)\n\t\tK --\x3e N(ClassNotFoundException 未找到相应类异常)\n\t\tK --\x3e O(NullPointerException 空指针异常)\n\t\tK --\x3e P(IllegalArgumentException 不允许访问某类异常)\n\t\tK --\x3e Q(ArrayIndexOutOfBoundsException 数组下标越界异常)\n\t\tK --\x3e R(UnknownTypeException)\n")])])]),a("p",[t._v("在Java中，所有的异常都有共同的祖先java.lang包下的"),a("strong",[t._v("Throwable类")]),t._v("。有两大子类："),a("strong",[t._v("Exception(异常)"),a("strong",[t._v("和")]),t._v("Error(错误)")]),t._v("。")]),t._v(" "),a("p",[a("strong",[t._v("Error(错误)：是程序无法处理的错误")]),t._v("，表示运行的应用程序中较严重的问题。大多数错误与代码编写这执行的操作无关，而表示的是代码运行时JVM出现的问题。这些错误表示故障发生于虚拟机自身、或者发生在虚拟机试图执行应用时。这些错误是不可查的，因为它们在应用程序的控制和处理能力之 外，而且绝大多数是程序运行时不允许出现的状况。对于设计合理的应用程序来说，即使确实发生了错误，本质上也不应该试图去处理它所引起的异常状况。在 Java中，错误通过Error的子类描述。")]),t._v(" "),a("p",[a("strong",[t._v("Exception(异常)：是程序本身可以处理的异常。")])]),t._v(" "),a("h2",{attrs:{id:"throwable类常用方法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#throwable类常用方法"}},[t._v("#")]),t._v(" Throwable类常用方法")]),t._v(" "),a("ul",[a("li",[t._v("public string getMessage(): 返回异常发生时的详细信息")]),t._v(" "),a("li",[t._v("public string toString(): 返回异常发生时的简要描述")]),t._v(" "),a("li",[t._v("public string getLocalizedMessage(): 返回异常对象的本地化信息。使用Throwable的子类覆盖这个方法，可\n以声称本地化信息。如果子类没有覆盖该方法，则该方法返回的信息与getMessage()返回的结果相同")]),t._v(" "),a("li",[t._v("public void printStackTrace(): 在控制台上打印Throwable对象封装的异常信息")])]),t._v(" "),a("h2",{attrs:{id:"异常处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#异常处理"}},[t._v("#")]),t._v(" 异常处理")]),t._v(" "),a("ul",[a("li",[t._v("try块：用于捕获异常。其后可接任意个catch块，如果没有catch块，则必须跟一个finally块。")]),t._v(" "),a("li",[t._v("catch块：用于处理try捕获到的异常。")]),t._v(" "),a("li",[t._v("finally块：无论是捕获还是处理异常，finally块中的语句都会被执行，即使在try或catch块中遇到return，finally语句仍然会在返回之前执行。\n"),a("ul",[a("li",[t._v("若在finally语句中出现了异常，则finally块不会被执行；")]),t._v(" "),a("li",[t._v("若在前面的代码中使用了System.ou()退出程序，则finally块不会被执行；")]),t._v(" "),a("li",[t._v("程序所在线程死亡，则finally块不会被执行；")]),t._v(" "),a("li",[t._v("关闭CPU，则finally块不会被执行。")])])])])])}),[],!1,null,null,null);e.default=n.exports}}]);