(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{375:function(t,a,n){t.exports=n.p+"assets/img/hashmap-7.a62a6a44.jpg"},376:function(t,a,n){t.exports=n.p+"assets/img/hashmap-8.7b2fbcce.png"},449:function(t,a,n){"use strict";n.r(a);var e=n(25),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"concurrenthashmap-和-hashtable-的区别"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#concurrenthashmap-和-hashtable-的区别"}},[t._v("#")]),t._v(" ConcurrentHashMap 和 Hashtable 的区别")]),t._v(" "),e("p",[t._v("ConcurrentHashMap 和 Hashtable 的区别主要体现在实现线程安全的方式上不同。")]),t._v(" "),e("p",[e("strong",[t._v("底层数据结构：")])]),t._v(" "),e("p",[t._v("JDK1.7的 ConcurrentHashMap 底层采用 "),e("strong",[t._v("分段的数组+链表")]),t._v(" 实现，JDK1.8 采用的数据结构跟HashMap1.8的结构一样，"),e("strong",[t._v("数组+链表/红黑二叉树")]),t._v(" 。")]),t._v(" "),e("p",[t._v("Hashtable 和 JDK1.8 之前的 HashMap 的底层数据结构类似都是采用 "),e("strong",[t._v("数组+链表")]),t._v(" 的形式，数组是主体，链表则是主要为了解决哈希冲突而存在的；")]),t._v(" "),e("p",[e("strong",[t._v("实现线程安全的方式（重要）：")])]),t._v(" "),e("p",[t._v("① 在JDK1.7的时候，"),e("strong",[t._v("ConcurrentHashMap")]),t._v("（分段锁）对整个桶数组进行了分割分段(Segment)，每一把锁只锁容器其中一部分数据，多线程访问容器里不同数据段的数据，就不会存在锁竞争，提高并发访问率。到了JDK1.8 的时候已经摒弃了Segment的概念，而是直接用 "),e("strong",[t._v("Node 数组+链表+红黑树")]),t._v(" 的数据结构来实现，并发控制使用synchronized和CAS来操作。（JDK1.6以后 对synchronized锁做了很多优化）整个看起来就像是优化过且线程安全的 HashMap，虽然在JDK1.8中还能看到 Segment 的数据结构，但是已经简化了属性，只是为了兼容旧版本；")]),t._v(" "),e("p",[t._v("② Hashtable(同一把锁) :使用 synchronized 来保证线程安全，效率非常低下。当一个线程访问同步方法时，其他线程也访问同步方法，可能会进入阻塞或轮询状态，如使用put 添加元素，另一个线程不能使用 put 添加元素，也不能使用 get，竞争会越来越激烈效率越低。")]),t._v(" "),e("p",[e("img",{attrs:{src:n(375),alt:"hashmap-7"}})]),t._v(" "),e("p",[e("strong",[t._v("ConcurrentHashMap线程安全的具体实现方式/底层具体实现：")])]),t._v(" "),e("p",[t._v("**jdk1.7：**上图右边的结构，首先将数据分为一段一段的存储，然后给每一段数据配一把锁，当一个线程占用锁访问其中一个段数据时，其他段的数据也能被其他线程访问。")]),t._v(" "),e("p",[t._v("ConcurrentHashMap 是由 Segment 数组结构和 HashEntry 数组结构组成。Segment 实现了 ReentrantLock，所以 Segment 是一种可重入锁，扮演锁的角色。HashEntry 用于存储键值对数据。")]),t._v(" "),e("p",[t._v("一个 ConcurrentHashMap 里包含一个 Segment 数组。Segment 的结构和HashMap类似，是一种数组和链表结构，一个 Segment 包含一个 HashEntry 数组，每个 HashEntry 是一个链表结构的元素，每个 Segment 守护着一个HashEntry数组里的元素，当对 HashEntry 数组的数据进行修改时，必须首先获得对应的 Segment的锁。")]),t._v(" "),e("p",[e("strong",[t._v("jdk1.8：")])]),t._v(" "),e("p",[t._v("JDK1.8的ConcurrentHashMap（TreeBin: 红黑二叉树节点 Node: 链表节点）：")]),t._v(" "),e("p",[e("img",{attrs:{src:n(376),alt:"hashmap-8"}})]),t._v(" "),e("p",[t._v("ConcurrentHashMap取消了Segment分段锁，采用CAS和synchronized来保证并发安全。数据结构跟HashMap1.8的结构类似，数组+链表/红黑二叉树。")]),t._v(" "),e("p",[t._v("synchronized只锁定当前链表或红黑二叉树的首节点，这样只要hash不冲突，就不会产生并发，效率又提升N倍。")])])}),[],!1,null,null,null);a.default=s.exports}}]);